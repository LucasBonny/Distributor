package br.com.gunthercloud.distributor.repositories;

import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.test.context.ContextConfiguration;

import br.com.gunthercloud.distributor.DistributorApplication;
import br.com.gunthercloud.distributor.entity.Product;
import br.com.gunthercloud.distributor.repository.ProductRepository;
import br.com.gunthercloud.distributor.resources.Factory;

@DataJpaTest
@ContextConfiguration(classes = DistributorApplication.class)
public class ProductRepositoryTests {

	@Autowired
	private ProductRepository repository;

	private Long existingId;
	private Long nonExistingId;
	private long countTotalProduct;

	@BeforeEach
	public void setUp() {
		existingId = 1L;
		nonExistingId = 200L;
		countTotalProduct = repository.count();
	}

	@Test
	public void findByIdShouldReturnProductWhenIdExists() {
		Optional<Product> result = repository.findById(existingId);
		Assertions.assertTrue(result.isPresent());
	}

	@Test
	public void findByIdShouldReturnEmptyWhenIdDoesNotExist() {
		Optional<Product> result = repository.findById(nonExistingId);
		Assertions.assertTrue(result.isEmpty());
	}

	@Test
	public void saveShouldPersistProductWithAutoGeneratedId() {
		Product product = Factory.createProduct();
		product.setId(null);
		product = repository.save(product);

		Assertions.assertNotNull(product.getId());
	}

	@Test
	public void deleteByIdShouldDeleteWhenIdExists() {
		repository.deleteById(existingId);
		Optional<Product> result = repository.findById(existingId);

		Assertions.assertFalse(result.isPresent());
	}

	@Test
	public void existsByIdShouldReturnTrueWhenIdExists() {
		boolean result = repository.existsById(existingId);
		Assertions.assertTrue(result);
	}

	@Test
	public void existsByIdShouldReturnFalseWhenIdDoesNotExist() {
		boolean result = repository.existsById(nonExistingId);
		Assertions.assertFalse(result);
	}

	@Test
	public void findAllShouldReturnListOfProducts() {
		List<Product> result = repository.findAll();
		Assertions.assertFalse(result.isEmpty());
		Assertions.assertEquals(countTotalProduct, result.size());
	}
}
