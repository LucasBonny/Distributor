package br.com.gunthercloud.distributor.repositories;

import br.com.gunthercloud.distributor.DistributorApplication;
import br.com.gunthercloud.distributor.entities.Supplier;
import br.com.gunthercloud.distributor.repository.SupplierRepository;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.test.context.ContextConfiguration;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

@DataJpaTest
@ContextConfiguration(classes = DistributorApplication.class)
public class SupplierRepositoryTests {

	@Autowired
	private SupplierRepository repository;

	private UUID existingId;
	private UUID nonExistingId;
	private long countTotalSupplier;

	@BeforeEach
	public void setUp() {
		existingId = UUID.fromString("550e8400-e29b-41d4-a716-446655440001");
		nonExistingId = UUID.fromString("550e8400-e29b-41d4-a716-446655440221");
		countTotalSupplier = repository.count(); // captura total antes dos testes
	}

	@Test
	public void findByIdShouldReturnSupplierWhenIdExists() {
		Optional<Supplier> result = repository.findById(existingId);
		Assertions.assertTrue(result.isPresent());
	}

	@Test
	public void findByIdShouldReturnEmptyWhenIdDoesNotExist() {
		Optional<Supplier> result = repository.findById(nonExistingId);
		Assertions.assertTrue(result.isEmpty());
	}

	@Test
	public void saveShouldPersistSupplierWithAutoGeneratedId() {
		Supplier supplier = new Supplier(null,71640321085L,"Coca-Cola 2","St. de Habitações Individuais Sul QL 14 - Lago Sul, Brasília - DF",123681234,821734129083L);
		supplier = repository.save(supplier);

		Assertions.assertNotNull(supplier.getId());
	}

	@Test
	public void deleteByIdShouldDeleteWhenIdExists() {
		repository.deleteById(existingId);
		Optional<Supplier> result = repository.findById(existingId);

		Assertions.assertFalse(result.isPresent());
	}

	@Test
	public void existsByIdShouldReturnTrueWhenIdExists() {
		boolean result = repository.existsById(existingId);
		Assertions.assertTrue(result);
	}

	@Test
	public void existsByIdShouldReturnFalseWhenIdDoesNotExist() {
		boolean result = repository.existsById(nonExistingId);
		Assertions.assertFalse(result);
	}

	@Test
	public void findAllShouldReturnListOfSuppliers() {
		List<Supplier> result = repository.findAll();
		Assertions.assertFalse(result.isEmpty());
		Assertions.assertEquals(countTotalSupplier, result.size());
	}
}
